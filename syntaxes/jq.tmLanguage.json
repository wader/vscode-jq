{
  "name": "jq",
  "scopeName": "source.jq",
  "fileTypes": [
    "jq"
  ],
  "patterns": [
    {
      "include": "#main"
    }
  ],
  "repository": {
    "main": {
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#array"
        },
        {
          "include": "#object"
        },
        {
          "include": "#function"
        },
        {
          "include": "#string"
        },
        {
          "include": "#field"
        },
        {
          "include": "#variable"
        },
        {
          "include": "#format"
        },
        {
          "include": "#constant"
        },
        {
          "include": "#keyword"
        },
        {
          "include": "#filter"
        },
        {
          "include": "#number"
        },
        {
          "include": "#operator"
        },
        {
          "include": "#punctuation"
        }
      ]
    },
    "comment": {
      "name": "comment.line.number-sign.jq",
      "begin": "#",
      "end": "(?<!\\\\)\r?\n"
    },
    "constant": {
      "name": "constant.language.jq",
      "match": "(?<!\\.)\\b(true|false|null)(?!\\s*:)\\b"
    },
    "field": {
      "name": "entity.other.attribute-name.jq",
      "match": "\\.[a-zA-Z_]\\w*"
    },
    "filter": {
      "name": "support.function.jq",
      "match": "([a-zA-Z_]\\w*::)*[a-zA-Z_]\\w*"
    },
    "format": {
      "name": "support.function.jq",
      "match": "@\\w+"
    },
    "function": {
      "name": "meta.function.jq",
      "begin": "(?<!\\.)\\bdef(?!\\s*:)\\b",
      "end": "([a-zA-Z_]\\w*::)*[a-zA-Z_@]\\w*",
      "beginCaptures": {
        "0": {
          "name": "storage.type.function.jq"
        }
      },
      "endCaptures": {
        "0": {
          "name": "entity.name.function.jq"
        }
      },
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "name": "invalid.illegal.identifier.jq",
          "match": "\\S+"
        }
      ]
    },
    "keyword": {
      "name": "keyword.control.jq",
      "match": "(?x)\n(?<!\\.) \\b\n( and\n| as\n| break\n| catch\n| elif\n| else\n| empty\n| end\n| foreach\n| if\n| import\n| include\n| label\n| module\n| or\n| reduce\n| then\n| try\n) (?!\\s*:) \\b"
    },
    "number": {
      "name": "constant.numeric.jq",
      "match": "([0-9.]{2,}|[0-9]+)([eE][+-]?[0-9]+)?"
    },
    "array": {
      "name": "meta.array.jq",
      "begin": "\\[",
      "end": "\\]",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.bracket.square.begin.jq"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.bracket.square.end.jq"
        }
      },
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#string"
        },
        {
          "begin": "\\(",
          "end": "\\)",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.bracket.round.begin.jq"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.bracket.round.end.jq"
            }
          },
          "patterns": [
            {
              "include": "#self_in_round_brackets"
            }
          ]
        },
        {
          "include": "#main"
        },
        {
          "name": "punctuation.separator.jq",
          "match": ","
        },
        {
          "name": "invalid.illegal.identifier.jq",
          "match": "\\S+"
        }
      ]
    },
    "object": {
      "name": "meta.object.jq",
      "begin": "{",
      "end": "}",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.bracket.curly.begin.jq"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.bracket.curly.end.jq"
        }
      },
      "patterns": [
        {
          "include": "#comment"
        },
        {
          "include": "#string"
        },
        {
          "include": "#variable"
        },
        {
          "name": "entity.other.attribute-name.id.jq",
          "match": "([a-zA-Z_]\\w*::)*[a-zA-Z_]\\w*"
        },
        {
          "begin": "\\(",
          "end": "\\)",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.bracket.round.begin.jq"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.bracket.round.end.jq"
            }
          },
          "patterns": [
            {
              "include": "#self_in_round_brackets"
            }
          ]
        },
        {
          "begin": ":",
          "end": ",|(?=})",
          "beginCaptures": {
            "0": {
              "name": "punctuation.separator.begin.jq"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.separator.end.jq"
            }
          },
          "patterns": [
            {
              "include": "#self_in_round_brackets"
            }
          ]
        },
        {
          "name": "punctuation.separator.jq",
          "match": ","
        },
        {
          "name": "invalid.illegal.identifier.jq",
          "match": "\\S+"
        }
      ]
    },
    "operator": {
      "name": "keyword.operator.jq",
      "match": "(?x) ( \\.\\.? | \\?// | \\? | ==? | //=? | \\|=? | \\+=? | -=? | \\*=? | /=? | %=? | != | <=? | >=? )"
    },
    "punctuation": {
      "patterns": [
        {
          "name": "punctuation.bracket.round.jq",
          "match": "\\(|\\)"
        },
        {
          "name": "punctuation.bracket.square.jq",
          "match": "\\[|\\]"
        },
        {
          "name": "punctuation.separator.jq",
          "match": ",|;|:"
        }
      ]
    },
    "self_in_round_brackets": {
      "patterns": [
        {
          "begin": "\\(",
          "end": "\\)",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.bracket.round.begin.jq"
            }
          },
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.bracket.round.end.jq"
            }
          },
          "patterns": [
            {
              "include": "#main"
            }
          ]
        },
        {
          "include": "#main"
        }
      ]
    },
    "string": {
      "name": "string.quoted.double.jq",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.jq",
          "match": "\\\\([\"\\\\/bfnrt]|u[0-9a-fA-F]{4})"
        },
        {
          "include": "#string_interpolation"
        },
        {
          "name": "invalid.illegal.unrecognized-string-escape.jq",
          "match": "\\\\."
        }
      ]
    },
    "string_interpolation": {
      "name": "source.jq.embedded.source",
      "begin": "\\\\\\(",
      "end": "\\)",
      "beginCaptures": {
        "0": {
          "name": "punctuation.section.embedded.jq.begin.jq"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.section.embedded.jq.end.jq"
        }
      },
      "patterns": [
        {
          "include": "#self_in_round_brackets"
        }
      ]
    },
    "variable": {
      "name": "variable.other.jq",
      "match": "\\$([a-zA-Z_]\\w*::)*[a-zA-Z_]\\w*"
    }
  }
}